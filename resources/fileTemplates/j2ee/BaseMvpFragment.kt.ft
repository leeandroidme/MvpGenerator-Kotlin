package ${PACKAGE_NAME}

import ${COMMON_PACKAGE}.IPresenter

import android.os.Bundle
import dagger.android.support.AndroidSupportInjection
import javax.inject.Inject

abstract class BaseMvpFragment<PRESENTER : IPresenter<VIEW>, VIEW> : BaseFragment() {
    @Inject
    protected lateinit var presenter: PRESENTER
    private var firstStart: Boolean = true

    fun getExtraPresenters(): Array<IPresenter<VIEW>>? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        AndroidSupportInjection.inject(this)
        super.onCreate(savedInstanceState)
    }

    private fun doStart() {
        if (presenter != null) {
            presenter.onViewAttached(this as VIEW, firstStart)
        }
        var extraPresenters = getExtraPresenters()
        if (extraPresenters != null && extraPresenters.isNotEmpty()) {
            for (p in extraPresenters) {
                p.onViewAttached(this as VIEW, firstStart)
            }
        }
        firstStart = false
    }

    override fun onStart() {
        doStart()
        super.onStart()
    }

    @Override
    override fun onDestroy() {
        if (presenter != null) {
            presenter.onDestroy()
        }
        var extraPresenters = getExtraPresenters()
        if (extraPresenters != null && extraPresenters.isNotEmpty()) {
            for (p in extraPresenters) {
                p.onDestroy()
            }
        }
        super.onDestroy()
    }

    override fun onStop() {
        super.onStop()
        if (presenter != null) presenter.onViewDetached()
        var extraPresenters = getExtraPresenters()
        if (extraPresenters != null && extraPresenters.isNotEmpty()) {
            for (p in extraPresenters) {
                p.onViewDetached()
            }
        }
    }
}